#!/usr/bin/env python
import argparse
import sys
import numpy as np
import scipy.linalg


parser = argparse.ArgumentParser(description='Generate input data and check output data.')
parser.add_argument('size', type=int, default=1024,
                   help='the size of the input matrix to generate')
parser.add_argument('seed', nargs='?', type=int, default=1337,
				   help='random number generator seed')
parser.add_argument('--saveinputfile', type=argparse.FileType('w'),
				   default=None,
				   help='save generated input to file')
parser.add_argument('--printinput', action='store_true', help='print generated input')
parser.add_argument('--checkoutputfile', type=argparse.FileType('r'), default=None,
				   help='compare file result against expected result')
parser.add_argument('--checkoutputstring', type=str, default=None,
				   help='compare string result against expected result')

args = parser.parse_args()
np.random.seed(args.seed)

v = np.random.random_sample((args.size, args.size))
l = np.tril(v,-1)
np.fill_diagonal(l, np.ones(args.size))
u = np.triu(v)
r = np.dot(l,u)

floatformat = '%.5f'
if args.printinput:
	sys.stdout.write('\n'.join([ 
		','.join([floatformat % num for num in l]) 
	for l in r]) + '\n')
else:
	if args.saveinputfile:
		args.saveinputfile.write('\n'.join([ 
			','.join([floatformat % num for num in l]) 
		for l in r]) + '\n')
		args.saveinputfile.close()

	
if args.checkoutputstring or args.checkoutputfile:
	P,L,U = scipy.linalg.lu(r)
	raise Exception('Unimplemented')

	if args.checkoutputstring:
		sys.exit(0)
	else:
		sys.exit(0)

#	args.outfile.write(','.join([str(random.uniform(float(-1), float(1))) for x in range(args.size)]) + '\n')
#args.outfile.write('\n')
#args.outfile.close()








