#!/usr/bin/env node
var path = require('path')
var configLib = require(path.join(__dirname, '../lib/config'))
var nopt = require('nopt')
var noptUsage = require('nopt-usage')
var pointer = require('json-pointer')
var extend = require('extend')
var shelljs = require('shelljs')
var moment = require('moment')

var knownOpts = {
  // 'benchmark': [String, Array],
  'build': [String, Array],
  // 'compiler': [String, Array],
  // 'experiment': String,
  'help': Boolean,
  // 'implementation': [String, Array],
  'input-size': String,
  'iteration-number': Number,
  'verbose': Boolean
}
var shortHands = {
  'b': ['--benchmark'],
  'bu': ['--build'],
  'c': ['--compiler'],
  'e': ['--experiment'],
  'h': ['--help'],
  'i': ['--implementation'],
  'is': ['--input-size'],
  'n': ['--iteration-number'],
  'v': ['--verbose']
}

var suiteRoot = path.join(__dirname, '../../../')

function deepcopy (o) {
  if (Array.prototype.isPrototypeOf(o)) {
    return extend(true, [], o)
  } else {
    return extend(true, {}, o)
  }
}

var runOutputSchemaPath = '/definitions/run-output'
var validRunOutput = configLib.createMatcher(runOutputSchemaPath)
function run (config, options) {
  var runnerPath = path.join(config.location, '/' + config.compiler['runner-name'])
  var runnerArguments = config.implementation['runner-arguments'].join(' ')
  var status = shelljs.exec(runnerPath + ' ' + runnerArguments, {silent: !options.verbose})
  if (status.code !== 0) {
    console.log('Execution error for ' + runnerPath + ' with ' + runnerArguments + ':')
    console.log(status.output)
    process.exit(1)
  }

  var jsonOutputMatch = status.output.match(/\{.*\}/)
  var jsonOutput
  if (jsonOutputMatch === null) {
    console.log('Invalid output for ' + runnerPath + ' with ' + runnerArguments + ',')
    console.log('missing json result:')
    console.log(status.output)
    process.exit(1)
  }

  try {
    jsonOutput = JSON.parse(jsonOutputMatch)
  } catch (e) {
    console.log('Invalid output for ' + runnerPath + ' with ' + runnerArguments + ',')
    console.log('improperly formatted json result:')
    console.log(status.output)
    process.exit(1)
  }

  if (!validRunOutput(jsonOutput)) {
    console.log('Invalid output for ' + runnerPath + ' with ' + runnerArguments + ',')
    console.log('json object does not conform to ' + runOutputSchemaPath + ' schema:')
    console.log(status.output)
    process.exit(1)
  }

  return jsonOutput
}

configLib.config(suiteRoot, function (err, config) {
  if (err) {
    console.log(err)
    process.exit(1)
  }

  var description = {
    'benchmark': 'One of [' + config['benchmark-list'] + '], repeat to specify multiple benchmarks',
    'build': 'Build hash value, repeat to specify multiple builds',
    'compiler': 'One of [' + config['compiler-list'] + '], repeat to specify multiple compilers',
    'experiment': 'Path to experiment configuration file',
    'help': 'Display this help',
    'implementation': 'One of [' + config['implementation-list'] + '], repeat to specify multiple implementations',
    'input-size': 'One of [' + pointer.get(config.schema, '/definitions/experiment/properties/input-size/enum') + '], defaults to medium',
    'iteration-number': 'Number of times to execute the benchmark'
  }
  var parsed = nopt(knownOpts, shortHands)

  if (parsed.help) {
    var usage = noptUsage(knownOpts, shortHands, description)
    console.log(usage)
    process.exit(1)
  }

  /*
    var options = {
      'benchmarks': parsed.hasOwnProperty('benchmark') ? parsed['benchmark'] : config['benchmark-list'],
      'implementations': parsed.hasOwnProperty('implementation') ? parsed['implementation'] : config['implementation-list'],
      'compilers': parsed.hasOwnProperty('compiler') ? parsed['compiler'] : config['compiler-list']
    }
    */

  // Build benchmarks if built versions are not available

  // Load builds
  var results = {
    builds: {},
    experiment: {
      'type': 'experiment',
      'short-name': 'default',
      'input-size': parsed['input-size'] || 'medium',
      'iteration-number': parsed['iteration-number'] || 1
    }
  }
  var builds = parsed.build
  builds.forEach(function (configPath) {
    var runConfig = deepcopy(pointer.get(config, '/' + configPath))
    runConfig.experiment = results.experiment
    // Expand run-time arguments
    configLib.expand(runConfig, {strict: true})

    runConfig.results = {
      'times': []
    }

    if (parsed.verbose) {
      console.log('-------------- ' + runConfig.benchmark['short-name'] +
        ',' + runConfig.implementation['short-name'] +
        ',' + runConfig.compiler['short-name'] +
        ' --------------')
    }
    for (var i = 0; i < runConfig.experiment['iteration-number']; ++i) {
      if (parsed.verbose) {
        console.log('************** Iteration ' + i + ' ************')
      }
      var output = run(runConfig, parsed)
      runConfig.results.times.push(output.time)
    }

    results.builds[runConfig['short-name']] = runConfig
  })

  var silentState = shelljs.config.silent
  shelljs.config.silent = true
  results.time = moment().format()
  var dir = path.join(suiteRoot, '/runs/', results.time)
  shelljs.mkdir('-p', dir)
  shelljs.ln('-s', dir, path.join(suiteRoot, '/runs/latest'))
  JSON.stringify(results, null, '  ').to(path.join(dir, '/results.json'))
  shelljs.config.silent = silentState
})
